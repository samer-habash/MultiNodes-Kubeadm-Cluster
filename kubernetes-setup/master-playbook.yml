---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - python3
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - python3-apt

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

#  - name: create daemon.json file
#    file:
#      path: /etc/docker/daemon.json
#      state: touch
#      mode: '0755'
#
#  - name: Add lines to daemon.json
#    blockinfile:
#      path: /etc/docker/daemon.json
#      state: present
#      block: |
#        {
#           "exec-opts": ["native.cgroupdriver=systemd"],
#	       "log-driver": "json-file",
#	       "log-opts": {
#             "max-size": "100m"
#	       },
#	       "storage-driver": "overlay2"
#        }
  - name: add daemon.json file
    shell: |
      cat > /etc/docker/daemon.json <<EOF
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
      EOF

  - name: reload docker
    systemd:
      state: restarted
      daemon_reload: yes
      name: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add the br_netfilter module
    modprobe:
      name: br_netfilter
      state: present

  - name: add k8s.conf file
    file:
      path: /etc/sysctl.d/k8s.conf
      state: touch
      mode: '0755'

  - name: Add lines to k8s.conf
    blockinfile:
      path: /etc/sysctl.d/k8s.conf
      state: present
      block: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.bridge.bridge-nf-call-arptables = 1

  - name: update sysctl
    shell: sysctl --system

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Create kubelet file # A bug in Ubuntu kubelet doesn't add it .
    copy:
      content: "KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}"
      dest: "/etc/default/kubelet"
      mode: '0755'

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

  - name: Install flannel pod network
    become: false
    command: kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml

  - name: Generate join command
    command:  kubeadm token create --print-join-command
    become: false
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
    become: false

  handlers:
    - name: docker status
      service: name=docker state=started

